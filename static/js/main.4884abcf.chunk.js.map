{"version":3,"sources":["Counter.jsx","AddCounterForm.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Counter","props","onClick","decrement","id","name","value","increment","removeCounter","AddCounterForm","useState","setName","count","setCount","submit","Number","type","onChange","e","target","App","counters","setCounters","incrementCounter","console","log","newCounters","map","el","decrementCounter","filter","reduce","acc","cur","key","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mNAeeA,MAZf,SAAiBC,GACf,OACE,6BACE,4BAAQC,QAAS,kBAAMD,EAAME,UAAUF,EAAMG,MAA7C,KADF,gBAEgBH,EAAMI,KAFtB,iBAGiBJ,EAAMK,MACrB,4BAAQJ,QAAS,kBAAMD,EAAMM,UAAUN,EAAMG,MAA7C,KACA,4BAAQF,QAAS,kBAAMD,EAAMO,cAAcP,EAAMG,MAAjD,YCeSK,MArBf,SAAwBR,GAAQ,IAAD,EAELS,mBAAS,QAFJ,mBAEtBL,EAFsB,KAEhBM,EAFgB,OAGHD,mBAAS,KAHN,mBAGtBE,EAHsB,KAGfC,EAHe,KAW7B,OACE,6BACE,4BAAQX,QAAS,kBAPnBD,EAAMa,OAAOT,EAAMU,OAAOH,IAC1BD,EAAQ,SACRE,EAAS,KAKP,eACA,2BAAOG,KAAK,OAAOX,KAAK,OAAOC,MAAOD,EAAMY,SAAU,SAAAC,GAAC,OAAIP,EAAQO,EAAEC,OAAOb,UAC5E,2BAAOU,KAAK,OAAOX,KAAK,QAAQC,MAAOM,EAAOK,SAAU,SAAAC,GAAC,OAAIL,EAASK,EAAEC,OAAOb,YCgDtEc,MA9Df,WAEE,IAFa,EAOmBV,mBALR,CACtB,CAACN,GAAI,IAAKC,KAAM,YAAaC,MAAO,GACpC,CAACF,GAAI,IAAKC,KAAM,SAAUC,MAAO,KAJtB,mBAONe,EAPM,KAOIC,EAPJ,KAePC,EAAmB,SAACnB,GACxBoB,QAAQC,IAAI,MAAQrB,GACpB,IAAMsB,EAAcL,EAASM,KAAI,SAAAC,GAAE,OAAIA,EAAGxB,KAAOA,EAAV,eAAoBwB,EAApB,CAAwBtB,MAAOsB,EAAGtB,MAAQ,IAAMsB,KACvFN,EAAYI,IAERG,EAAmB,SAACzB,GACxBoB,QAAQC,IAAI,MAAQrB,GACpB,IAAMsB,EAAcL,EAASM,KAAI,SAAAC,GAAE,OAAIA,EAAGxB,KAAOA,EAAV,eAAoBwB,EAApB,CAAwBtB,MAAOsB,EAAGtB,MAAQ,IAAMsB,KACvFN,EAAYI,IAERlB,EAAgB,SAACJ,GACrBoB,QAAQC,IAAI,MAAQrB,GACpB,IAAMsB,EAAcL,EAASS,QAAO,SAAAF,GAAE,OAAIA,EAAGxB,KAAOA,KACpDkB,EAAYI,IAad,OACE,6BACE,wCADF,SAESL,EAASU,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAI3B,QAAO,GACtD,4BAAQJ,QApCY,WACtBsB,QAAQC,IAAI,SACZ,IAAMC,EAAcL,EAASM,KAAI,SAAAC,GAAE,sBAAUA,EAAV,CAActB,MAAM,OACvDgB,EAAYI,KAiCV,qBACA,6BACCL,EAASM,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAChBM,IAAKN,EAAGxB,GACRA,GAAIwB,EAAGxB,GACPC,KAAMuB,EAAGvB,KACTC,MAAOsB,EAAGtB,MACVC,UAAWgB,EACXpB,UAAW0B,EACXrB,cAAeA,OAEnB,6BACA,kBAAC,EAAD,CAAgBM,OA1BD,SAACT,EAAMO,GACxBY,QAAQC,IAAI,OACZ,IAAMC,EAAW,sBAAQL,GAAR,CAAkB,CACjChB,OACAC,MAAOM,EACPR,GAAI+B,KAAKC,YAEXd,EAAYI,QC/BIW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.4884abcf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Counter(props) {\n  return (\n    <div>\n      <button onClick={() => props.decrement(props.id)}>-</button>\n      Counter name {props.name}\n      Counter value {props.value}\n      <button onClick={() => props.increment(props.id)}>+</button>\n      <button onClick={() => props.removeCounter(props.id)}>Delete</button>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, { useState } from 'react';\nimport './App.css';\n\n\nfunction AddCounterForm(props) {\n\n  const [name, setName] = useState('----');\n  const [count, setCount] = useState('0');\n\n  const onSubmit = () => {\n    props.submit(name, Number(count));\n    setName('');\n    setCount(0);\n  };\n\n  return (\n    <div>\n      <button onClick={() => onSubmit()}>Add counter</button>\n      <input type=\"text\" name='name' value={name} onChange={e => setName(e.target.value)}/>\n      <input type=\"text\" name='value' value={count} onChange={e => setCount(e.target.value)}/>\n\n    </div>\n  );\n}\n\nexport default AddCounterForm;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\nimport AddCounterForm from \"./AddCounterForm\";\n\nfunction App() {\n\n  const initialCounters = [\n    {id: 123, name: 'Counter 1', value: 8},\n    {id: 234, name: 'Second', value: 8}\n  ];\n\n  const [counters, setCounters] = useState(initialCounters);\n\n  const resetTotalCount = () => {\n    console.log('reset');\n    const newCounters = counters.map(el => ({ ...el, value:0 }));\n    setCounters(newCounters);\n  };\n\n  const incrementCounter = (id) => {\n    console.log('inc' + id);\n    const newCounters = counters.map(el => el.id === id ? ({...el, value: el.value + 1}) : el);\n    setCounters(newCounters);\n  };\n  const decrementCounter = (id) => {\n    console.log('dec' + id);\n    const newCounters = counters.map(el => el.id === id ? ({...el, value: el.value - 1}) : el);\n    setCounters(newCounters);\n  };\n  const removeCounter = (id) => {\n    console.log('rem' + id);\n    const newCounters = counters.filter(el => el.id !== id);\n    setCounters(newCounters);\n  };\n\n  const addCounter = (name, count) => {\n    console.log('add');\n    const newCounters = [ ...counters, {\n      name,\n      value: count,\n      id: Math.random()\n    }];\n    setCounters(newCounters);\n  };\n\n  return (\n    <div>\n      <h1>Counters</h1>\n      Total {counters.reduce((acc, cur) => acc + cur.value, 0)}\n      <button onClick={resetTotalCount}>Reset total count</button>\n      <hr/>\n      {counters.map(el => <Counter\n          key={el.id}\n          id={el.id}\n          name={el.name}\n          value={el.value}\n          increment={incrementCounter}\n          decrement={decrementCounter}\n          removeCounter={removeCounter}\n      />)}\n      <hr/>\n      <AddCounterForm submit={addCounter}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}